1)создал класс GrayCodeTester. нашел класс Scanner,который позволяет использовать функции считыванния данных с консоли.Задача факториала делается легко.
2)
decode - переводит число из кода Грея в десятичное.Взято с википедии.
encode - переводит десятичное число в код Грея. Взято с википедии.
3)
В интерфейсе прописываю его методы по условию задачи.
4)
Класс ChromosomeCode наследует интерфейс, в котором я создаю объект класса grayCode.
С помощью команды @override описываю методы интерфейса на основе методов класса
grayCode.
5)
В классе ChromosomeCode создаю класс GrayCode_inner, который наследует класс 
GrayCode. 
Создаю public объект данного класса obj2 и для него могу вызывать функции
базового класса.
Внутренние классы лучше использовать, когда два класса тесно и часто взаимодействуют
друг с другом. Это позволяет группировать классы, связанные друг с другом.
6)
Создаю static GrayCode_nested(вложенный класс).Этот класс логически связан с классом-владельцем, но может быть использован отдельно
от него!
7)
Анонимный класс удобно использовать, когда нужно одноразово переопределить методы или
создать собственные методы объекта.
8)
Проверяем public класс:
в классе ChromosomeCode создаю public объект класса GrayCode, переписываю методы
интерфейса, используя класс GrayCode.
В main делаем проверку.
9)
Проверяем inner класс:
в классе ChromosomeCode создаю public объект класса GrayCode_inner, а в main
создаю объект класса ChromosomeCode, получаю доступ к его внутреннему объекту и для
него вызываю нужные методы.
10)
Проверка nested класса:
в main создаю объект класса ChromosomeCode.GrayCode_nested и к нему применяю нужные
методы.
11)
Проверяем анон класс:
при создании объекта класса ChromosomeCode переопределяю один из методов,вызов показывает,что все работает правильно. 
12)
 == - сравненивае ссылок
ex1,ex2 - объекты одного и того же класса
ex1.equals(ex2) - сравнение значений.
2-й объект ссылается на 1-й и значения у них одинаковые,тогда выведет true в обоих случаях
13)Всё включено в main.