1.
Факториал - очевидно.
2.
getGrayCode - возвращает число, переведенное в код Грея в десятичной форме записи.
Чтобы увидеть обычное представление(0 или 1), нужно на результат подействовать
функцией toBinary - она вернет двоичное представление десятичного числа.
3.
decode - переводит число из кода Грея в десятичное.
Число, которое вводится - десятичное, в компьютере уже в двоичном виде, который(вид)
является кодом Грея для какого-то десятичного числа. Оно и возвращается. Чтобы лучше
понять, ввести какое-то десятичное число, посмотреть результат и сравнить с таблицей
соответствия(в главном классе с main).
4.
encode - переводит десятичное число в код Грея методом getGrayCode. Чтобы увидеть
обычное представление(0 или 1), нужно на результат подействовать функцией toBinary - она
вернет двоичное представление десятичного числа.
5.
В интерфейсе(в отдельном файле) прописываю его методы.
6.
Класс ChromosomeCode наследует интерфейс, в котором я создаю объект класса grayCode, а
потом после команды @override описываю методы интерфейса на основе методов класса
grayCode, примененные к созданному объекту.(задание 5а)
7.
В классе ChromosomeCode создаю класс GrayCode_inner, который наследует класс 
GrayCode. Создаю public объект данного класса obj2 и для него могу вызывать функции
базового класса.
Внутренние классы лучше использовать, когда два класса тесно и часто взаимодействуют
друг с другом. Это позволяет группировать классы, вязанные друг с другом.
8.
Аналогично создаю static GrayCode_nested(вложенный класс).
Этот класс логически связан с классом-владельцем, но может быть использован отдельно
от него.
9.
Анонимный класс удобно использовать, когда нужно одноразово переопределить методы или
создать собственные методы объекта.
10.
Для проверки правильности работы методов в главном классе созданы эти же методы и вызваны.
Все проверки на одинаковых числах.
11.
Проверка public класса:
в классе ChromosomeCode создаю public объект класса GrayCode, переписываю методы
интерфейса, используя класс GrayCode.
В main создаю объект класса ChromosomeCode и для него вызываю методы.
12.
Проверка inner класса:
в классе ChromosomeCode создаю public объект класса GrayCode_inner, а в main
создаю объект класса ChromosomeCode, получаю доступ к его внутреннему объекту и для
него вызываю нужные методы.
13.
Проверка nested класса:
в main создаю объект класса ChromosomeCode.GrayCode_nested и к нему применяю нужные
методы.
14.
Проверка анонимного класса:
в main при создании объекта класса ChromosomeCode переписываю один из методов, при 
вызове убеждаюсь, что метод переписан. 
15.
 == - сравнение ссылок
ex1,ex2 - объекты одного класса
ex1.equals(ex2) - сравнение значений.
2-й объект ссылается на 1-й и значения у них одинаковые => true в обоих случаях
16.Все классы протестированы в main
Copyright@Воробей Влад:)